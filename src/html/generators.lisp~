(in-package :blog)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defclass caching-generator ()
  ((m-cached-html
    :initform (make-hash-table :test #'equal)
    :type hash-table
    :accessor access-cached-html))
  :documentation "Generator for all cachable views. Each cached page is stored inside the hash table")


(defclass post-page-generator (caching-generator)
  ())


(defclass main-page-generator (caching-generator)
  ()
  :documentation "Generator for main page.")


(defclass posts-list-generator (caching-generator)
  ())


(defclass categories-list-generator (caching-generator)
  ())

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod generate-page-from :start ((generator caching-generator)
                                      (object object-with-pages-cache))
  (with-accessors ((m-cached-html access-cached-html)) generator
    (multiple-value-bind (cached founded) (gethash (access-cached-page-index object) access-cached-html)
      (get-cached-html (if (or (not founded)
                               (edited-before object cached))
                           (setf (gethash (access-cached-page-index object) access-cached-html)
                                 (make-cached-page (call-next-method)))
                           cached)))))


(defmethod generate-page-from ((generator post-page-generator)
                               (object post))
  (standard-page
   (get-style)
   (get-menu)
   (access-title object)
   (to-html object)
   (markup* '(:hr))))


(defmethod generate-page-from ((generator main-page-generator)
                               (object main-container))
  (flet ((generate-posts-html (posts-list)
           (reduce #'stringify
                   (mapcar (lambda (x) (stringify (to-html x)
                                                  (markup* (list :a :href (format nil
                                                                                  "entry?title=~a"
                                                                                  (slot-value x
                                                                                              'm-id))
                                                                 "Comments"))))
                          posts-list))))

    (markup* (list :html
                   (standard-page
                    (get-style)
                    (get-menu (list "categories" "Categories"))
                    "Main Page"
                    (generate-posts-html (get-most-recent-posts
                                          object
                                          *posts-on-main-page*)))))))


(defmethod generate-page-from ((generator posts-list-generator)
                               (object posts-container))
  (markup* (list :html
                 (standard-page
                  (get-style :columns-for-main t)
                  (get-menu)
                  "Posts"
                  (reduce #'stringify (mapcar (lambda (x) (markup* (list :li (list :a :href (format nil
                                                                                                    "entry?title=~a"
                                                                                                    (slot-value x
                                                                                                                'm-id)))
                                                                          (slot-value x
                                                                                      'm-title))))

                                              (mapcar (lambda (x) (get-post object x))
                                                       (slot-value object 'm-post-ids))))))))


(defmethod generate-page-from ((generator categories-list-generator)
                               (object main-container))
  (markup* (list :html
                 (standard-page
                  (get-style :columns-for-main t)
                  (get-menu)
                  "Categories"
                  (reduce #'stringify (mapcar (lambda (x) (markup* (list :li (list :a :href (format nil
                                                                                                    "category?title=~a"
                                                                                                    x))
                                                                         (slot-value x
                                                                                     'm-title))))

                                              (hash-keys (slot-value object
                                                                     'm-categories))))))))


(defun generate-new-post-page ()
  (with-http-authentication
      (standard-page
          (get-style)
          (get-menu)
          "New Post"
        (markup (:h2 "Add a new post")
                (:form :action "/post-added" :method "post" :id "addform"
                       (:p "Title" (:br)
                           (:input :type "text" :name "title" :class "txt"))
                       (:p "Content" (:br)
                           (:textarea :name "content" :cols 80 :rows 20)
                           (:/textarea))
                       (:p (:input :type "submit" :value "Add" :class "btn")))))))


(defun hash-keys (hash-table)
  (loop for key being the hash-keys of hash-table collect key))
